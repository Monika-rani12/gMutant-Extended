CBMC version 5.11 (cbmc-5.11) 64-bit x86_64 linux
Parsing mcdc_program.c
Converting
Type-checking mcdc_program
Generating GOTO Program
Adding CPROVER library (x86_64)
Removal of function pointers and virtual functions
Generic Property Instrumentation
Rewriting existing assertions as assumptions
Running with 8 object bits, 56 offset bits (default)
Starting Bounded Model Checking
size of program expression: 51 steps
Generated 12 VCC(s), 12 remaining after simplification
Passing problem to string refinement loop with MiniSAT 2.2.1 without simplifier
converting SSA
Aiming to cover 12 goal(s)
Running string refinement loop with MiniSAT 2.2.1 without simplifier
BV-Refinement: post-processing
BV-Refinement: iteration 1
1673 variables, 6203 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main MC/DC independence condition `!(input / 5 != 0) && input % 7 == 0 && !(input > 100)'
Covered function main decision `input % 7 == 0 && input > 100 || input / 5 != 0' false
Covered function main condition `input / 5 != 0' false
Covered function main condition `input > 100' false
Covered function main condition `input % 7 == 0' true
BV-Refinement: post-processing
BV-Refinement: iteration 1
1673 variables, 5526 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main condition `input % 7 == 0' false
BV-Refinement: post-processing
BV-Refinement: iteration 1
1673 variables, 5527 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main decision `input % 7 == 0 && input > 100 || input / 5 != 0' true
Covered function main condition `input / 5 != 0' true
BV-Refinement: post-processing
BV-Refinement: iteration 1
1673 variables, 5528 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main condition `input > 100' true
BV-Refinement: post-processing
BV-Refinement: iteration 1
1673 variables, 5529 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main MC/DC independence condition `input / 5 != 0 && !(input % 7 == 0) && input > 100'
BV-Refinement: post-processing
BV-Refinement: iteration 1
1673 variables, 5530 clauses
SAT checker: instance is UNSATISFIABLE
BV-Refinement: got UNSAT, and the proof passes => UNSAT
Total iterations: 1
Runtime decision procedure: 0.00579186s

** coverage results:
[main.coverage.1] file mcdc_program.c line 11 function main MC/DC independence condition `input / 5 != 0 && !(input % 7 == 0) && input > 100': SATISFIED
[main.coverage.2] file mcdc_program.c line 11 function main MC/DC independence condition `!(input / 5 != 0) && !(input % 7 == 0) && input > 100': FAILED
[main.coverage.3] file mcdc_program.c line 11 function main MC/DC independence condition `!(input / 5 != 0) && input % 7 == 0 && !(input > 100)': SATISFIED
[main.coverage.4] file mcdc_program.c line 11 function main MC/DC independence condition `!(input / 5 != 0) && input % 7 == 0 && input > 100': FAILED
[main.coverage.5] file mcdc_program.c line 11 function main decision `input % 7 == 0 && input > 100 || input / 5 != 0' false: SATISFIED
[main.coverage.6] file mcdc_program.c line 11 function main decision `input % 7 == 0 && input > 100 || input / 5 != 0' true: SATISFIED
[main.coverage.7] file mcdc_program.c line 11 function main condition `input / 5 != 0' false: SATISFIED
[main.coverage.8] file mcdc_program.c line 11 function main condition `input / 5 != 0' true: SATISFIED
[main.coverage.9] file mcdc_program.c line 11 function main condition `input > 100' false: SATISFIED
[main.coverage.10] file mcdc_program.c line 11 function main condition `input > 100' true: SATISFIED
[main.coverage.11] file mcdc_program.c line 11 function main condition `input % 7 == 0' false: SATISFIED
[main.coverage.12] file mcdc_program.c line 11 function main condition `input % 7 == 0' true: SATISFIED

** 10 of 12 covered (83.3%)
** Used 6 iterations
Test suite:
input=0
input=1
input=5
input=21430283
input=12255244

